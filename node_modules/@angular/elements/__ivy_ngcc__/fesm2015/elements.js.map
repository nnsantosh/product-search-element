{"version":3,"file":"elements.js","sources":["../../../../../../packages/elements/src/utils.ts","../../../../../../packages/elements/src/extract-projectable-nodes.ts","../../../../../../packages/elements/src/component-factory-strategy.ts","../../../../../../packages/elements/src/create-custom-element.ts","../../../../../../packages/elements/src/version.ts","../../../../../../packages/elements/elements.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ComponentFactoryResolver, Injector, Type} from '@angular/core';\n\nconst matches = (() => {\n  const elProto = Element.prototype as any;\n  return elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n      elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n})();\n\n/**\n * Provide methods for scheduling the execution of a callback.\n */\nexport const scheduler = {\n  /**\n   * Schedule a callback to be called after some delay.\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  schedule(taskFn: () => void, delay: number): () => void {\n    const id = setTimeout(taskFn, delay);\n    return () => clearTimeout(id);\n  },\n\n  /**\n   * Schedule a callback to be called before the next render.\n   * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  scheduleBeforeRender(taskFn: () => void): () => void {\n    // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`\n    //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).\n    if (typeof window === 'undefined') {\n      // For SSR just schedule immediately.\n      return scheduler.schedule(taskFn, 0);\n    }\n\n    if (typeof window.requestAnimationFrame === 'undefined') {\n      const frameMs = 16;\n      return scheduler.schedule(taskFn, frameMs);\n    }\n\n    const id = window.requestAnimationFrame(taskFn);\n    return () => window.cancelAnimationFrame(id);\n  },\n};\n\n/**\n * Convert a camelCased string to kebab-cased.\n */\nexport function camelToDashCase(input: string): string {\n  return input.replace(/[A-Z]/g, char => `-${char.toLowerCase()}`);\n}\n\n/**\n * Create a `CustomEvent` (even on browsers where `CustomEvent` is not a constructor).\n */\nexport function createCustomEvent(doc: Document, name: string, detail: any): CustomEvent {\n  const bubbles = false;\n  const cancelable = false;\n\n  // On IE9-11, `CustomEvent` is not a constructor.\n  if (typeof CustomEvent !== 'function') {\n    const event = doc.createEvent('CustomEvent');\n    event.initCustomEvent(name, bubbles, cancelable, detail);\n    return event;\n  }\n\n  return new CustomEvent(name, {bubbles, cancelable, detail});\n}\n\n/**\n * Check whether the input is an `Element`.\n */\nexport function isElement(node: Node|null): node is Element {\n  return !!node && node.nodeType === Node.ELEMENT_NODE;\n}\n\n/**\n * Check whether the input is a function.\n */\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n\n/**\n * Convert a kebab-cased string to camelCased.\n */\nexport function kebabToCamelCase(input: string): string {\n  return input.replace(/-([a-z\\d])/g, (_, char) => char.toUpperCase());\n}\n\n/**\n * Check whether an `Element` matches a CSS selector.\n */\nexport function matchesSelector(element: Element, selector: string): boolean {\n  return matches.call(element, selector);\n}\n\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nexport function strictEquals(value1: any, value2: any): boolean {\n  return value1 === value2 || (value1 !== value1 && value2 !== value2);\n}\n\n/** Gets a map of default set of attributes to observe and the properties they affect. */\nexport function getDefaultAttributeToPropertyInputs(\n    inputs: {propName: string, templateName: string}[]) {\n  const attributeToPropertyInputs: {[key: string]: string} = {};\n  inputs.forEach(({propName, templateName}) => {\n    attributeToPropertyInputs[camelToDashCase(templateName)] = propName;\n  });\n\n  return attributeToPropertyInputs;\n}\n\n/**\n * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n * are defined.\n */\nexport function getComponentInputs(\n    component: Type<any>, injector: Injector): {propName: string, templateName: string}[] {\n  const componentFactoryResolver: ComponentFactoryResolver = injector.get(ComponentFactoryResolver);\n  const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n  return componentFactory.inputs;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// NOTE: This is a (slightly improved) version of what is used in ngUpgrade's\n//       `DowngradeComponentAdapter`.\n// TODO(gkalpak): Investigate if it makes sense to share the code.\n\nimport {isElement, matchesSelector} from './utils';\n\nexport function extractProjectableNodes(host: HTMLElement, ngContentSelectors: string[]): Node[][] {\n  const nodes = host.childNodes;\n  const projectableNodes: Node[][] = ngContentSelectors.map(() => []);\n  let wildcardIndex = -1;\n\n  ngContentSelectors.some((selector, i) => {\n    if (selector === '*') {\n      wildcardIndex = i;\n      return true;\n    }\n    return false;\n  });\n\n  for (let i = 0, ii = nodes.length; i < ii; ++i) {\n    const node = nodes[i];\n    const ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n\n    if (ngContentIndex !== -1) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n\n  return projectableNodes;\n}\n\nfunction findMatchingIndex(node: Node, selectors: string[], defaultIndex: number): number {\n  let matchingIndex = defaultIndex;\n\n  if (isElement(node)) {\n    selectors.some((selector, i) => {\n      if ((selector !== '*') && matchesSelector(node, selector)) {\n        matchingIndex = i;\n        return true;\n      }\n      return false;\n    });\n  }\n\n  return matchingIndex;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentFactory, ComponentFactoryResolver, ComponentRef, EventEmitter, Injector, OnChanges, SimpleChange, SimpleChanges, Type} from '@angular/core';\nimport {merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {NgElementStrategy, NgElementStrategyEvent, NgElementStrategyFactory} from './element-strategy';\nimport {extractProjectableNodes} from './extract-projectable-nodes';\nimport {isFunction, scheduler, strictEquals} from './utils';\n\n/** Time in milliseconds to wait before destroying the component ref when disconnected. */\nconst DESTROY_DELAY = 10;\n\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n *\n * @publicApi\n */\nexport class ComponentNgElementStrategyFactory implements NgElementStrategyFactory {\n  componentFactory: ComponentFactory<any>;\n\n  constructor(component: Type<any>, injector: Injector) {\n    this.componentFactory =\n        injector.get(ComponentFactoryResolver).resolveComponentFactory(component);\n  }\n\n  create(injector: Injector) {\n    return new ComponentNgElementStrategy(this.componentFactory, injector);\n  }\n}\n\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n *\n * @publicApi\n */\nexport class ComponentNgElementStrategy implements NgElementStrategy {\n  /** Merged stream of the component's output events. */\n  // TODO(issue/24571): remove '!'.\n  events!: Observable<NgElementStrategyEvent>;\n\n  /** Reference to the component that was created on connect. */\n  private componentRef: ComponentRef<any>|null = null;\n\n  /** Changes that have been made to the component ref since the last time onChanges was called. */\n  private inputChanges: SimpleChanges|null = null;\n\n  /** Whether the created component implements the onChanges function. */\n  private implementsOnChanges = false;\n\n  /** Whether a change detection has been scheduled to run on the component. */\n  private scheduledChangeDetectionFn: (() => void)|null = null;\n\n  /** Callback function that when called will cancel a scheduled destruction on the component. */\n  private scheduledDestroyFn: (() => void)|null = null;\n\n  /** Initial input values that were set before the component was created. */\n  private readonly initialInputValues = new Map<string, any>();\n\n  /**\n   * Set of component inputs that have not yet changed, i.e. for which `ngOnChanges()` has not\n   * fired. (This is used to determine the value of `fistChange` in `SimpleChange` instances.)\n   */\n  private readonly unchangedInputs = new Set<string>();\n\n  constructor(private componentFactory: ComponentFactory<any>, private injector: Injector) {}\n\n  /**\n   * Initializes a new component if one has not yet been created and cancels any scheduled\n   * destruction.\n   */\n  connect(element: HTMLElement) {\n    // If the element is marked to be destroyed, cancel the task since the component was reconnected\n    if (this.scheduledDestroyFn !== null) {\n      this.scheduledDestroyFn();\n      this.scheduledDestroyFn = null;\n      return;\n    }\n\n    if (this.componentRef === null) {\n      this.initializeComponent(element);\n    }\n  }\n\n  /**\n   * Schedules the component to be destroyed after some small delay in case the element is just\n   * being moved across the DOM.\n   */\n  disconnect() {\n    // Return if there is no componentRef or the component is already scheduled for destruction\n    if (this.componentRef === null || this.scheduledDestroyFn !== null) {\n      return;\n    }\n\n    // Schedule the component to be destroyed after a small timeout in case it is being\n    // moved elsewhere in the DOM\n    this.scheduledDestroyFn = scheduler.schedule(() => {\n      if (this.componentRef !== null) {\n        this.componentRef.destroy();\n        this.componentRef = null;\n      }\n    }, DESTROY_DELAY);\n  }\n\n  /**\n   * Returns the component property value. If the component has not yet been created, the value is\n   * retrieved from the cached initialization values.\n   */\n  getInputValue(property: string): any {\n    if (this.componentRef === null) {\n      return this.initialInputValues.get(property);\n    }\n\n    return this.componentRef.instance[property];\n  }\n\n  /**\n   * Sets the input value for the property. If the component has not yet been created, the value is\n   * cached and set when the component is created.\n   */\n  setInputValue(property: string, value: any): void {\n    if (this.componentRef === null) {\n      this.initialInputValues.set(property, value);\n      return;\n    }\n\n    // Ignore the value if it is strictly equal to the current value, except if it is `undefined`\n    // and this is the first change to the value (because an explicit `undefined` _is_ strictly\n    // equal to not having a value set at all, but we still need to record this as a change).\n    if (strictEquals(value, this.getInputValue(property)) &&\n        !((value === undefined) && this.unchangedInputs.has(property))) {\n      return;\n    }\n\n    this.recordInputChange(property, value);\n    this.componentRef.instance[property] = value;\n    this.scheduleDetectChanges();\n  }\n\n  /**\n   * Creates a new component through the component factory with the provided element host and\n   * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n   */\n  protected initializeComponent(element: HTMLElement) {\n    const childInjector = Injector.create({providers: [], parent: this.injector});\n    const projectableNodes =\n        extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n    this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n\n    this.implementsOnChanges = isFunction((this.componentRef.instance as OnChanges).ngOnChanges);\n\n    this.initializeInputs();\n    this.initializeOutputs(this.componentRef);\n\n    this.detectChanges();\n\n    const applicationRef = this.injector.get<ApplicationRef>(ApplicationRef);\n    applicationRef.attachView(this.componentRef.hostView);\n  }\n\n  /** Set any stored initial inputs on the component's properties. */\n  protected initializeInputs(): void {\n    this.componentFactory.inputs.forEach(({propName}) => {\n      if (this.implementsOnChanges) {\n        // If the component implements `ngOnChanges()`, keep track of which inputs have never\n        // changed so far.\n        this.unchangedInputs.add(propName);\n      }\n\n      if (this.initialInputValues.has(propName)) {\n        // Call `setInputValue()` now that the component has been instantiated to update its\n        // properties and fire `ngOnChanges()`.\n        this.setInputValue(propName, this.initialInputValues.get(propName));\n      }\n    });\n\n    this.initialInputValues.clear();\n  }\n\n  /** Sets up listeners for the component's outputs so that the events stream emits the events. */\n  protected initializeOutputs(componentRef: ComponentRef<any>): void {\n    const eventEmitters = this.componentFactory.outputs.map(({propName, templateName}) => {\n      const emitter: EventEmitter<any> = componentRef.instance[propName];\n      return emitter.pipe(map(value => ({name: templateName, value})));\n    });\n\n    this.events = merge(...eventEmitters);\n  }\n\n  /** Calls ngOnChanges with all the inputs that have changed since the last call. */\n  protected callNgOnChanges(componentRef: ComponentRef<any>): void {\n    if (!this.implementsOnChanges || this.inputChanges === null) {\n      return;\n    }\n\n    // Cache the changes and set inputChanges to null to capture any changes that might occur\n    // during ngOnChanges.\n    const inputChanges = this.inputChanges;\n    this.inputChanges = null;\n    (componentRef.instance as OnChanges).ngOnChanges(inputChanges);\n  }\n\n  /**\n   * Schedules change detection to run on the component.\n   * Ignores subsequent calls if already scheduled.\n   */\n  protected scheduleDetectChanges(): void {\n    if (this.scheduledChangeDetectionFn) {\n      return;\n    }\n\n    this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(() => {\n      this.scheduledChangeDetectionFn = null;\n      this.detectChanges();\n    });\n  }\n\n  /**\n   * Records input changes so that the component receives SimpleChanges in its onChanges function.\n   */\n  protected recordInputChange(property: string, currentValue: any): void {\n    // Do not record the change if the component does not implement `OnChanges`.\n    // (We can only determine that after the component has been instantiated.)\n    if (this.componentRef !== null && !this.implementsOnChanges) {\n      return;\n    }\n\n    if (this.inputChanges === null) {\n      this.inputChanges = {};\n    }\n\n    // If there already is a change, modify the current value to match but leave the values for\n    // previousValue and isFirstChange.\n    const pendingChange = this.inputChanges[property];\n    if (pendingChange) {\n      pendingChange.currentValue = currentValue;\n      return;\n    }\n\n    const isFirstChange = this.unchangedInputs.has(property);\n    this.unchangedInputs.delete(property);\n\n    const previousValue = isFirstChange ? undefined : this.getInputValue(property);\n    this.inputChanges[property] = new SimpleChange(previousValue, currentValue, isFirstChange);\n  }\n\n  /** Runs change detection on the component. */\n  protected detectChanges(): void {\n    if (this.componentRef === null) {\n      return;\n    }\n\n    this.callNgOnChanges(this.componentRef);\n    this.componentRef.changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, Type} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentNgElementStrategyFactory} from './component-factory-strategy';\nimport {NgElementStrategy, NgElementStrategyFactory} from './element-strategy';\nimport {createCustomEvent, getComponentInputs, getDefaultAttributeToPropertyInputs} from './utils';\n\n/**\n * Prototype for a class constructor based on an Angular component\n * that can be used for custom element registration. Implemented and returned\n * by the {@link createCustomElement createCustomElement() function}.\n *\n * @publicApi\n */\nexport interface NgElementConstructor<P> {\n  /**\n   * An array of observed attribute names for the custom element,\n   * derived by transforming input property names from the source component.\n   */\n  readonly observedAttributes: string[];\n\n  /**\n   * Initializes a constructor instance.\n   * @param injector If provided, overrides the configured injector.\n   */\n  new(injector?: Injector): NgElement&WithProperties<P>;\n}\n\n/**\n * Implements the functionality needed for a custom element.\n *\n * @publicApi\n */\nexport abstract class NgElement extends HTMLElement {\n  /**\n   * The strategy that controls how a component is transformed in a custom element.\n   */\n  // TODO(issue/24571): remove '!'.\n  protected ngElementStrategy!: NgElementStrategy;\n  /**\n   * A subscription to change, connect, and disconnect events in the custom element.\n   */\n  protected ngElementEventsSubscription: Subscription|null = null;\n\n  /**\n   * Prototype for a handler that responds to a change in an observed attribute.\n   * @param attrName The name of the attribute that has changed.\n   * @param oldValue The previous value of the attribute.\n   * @param newValue The new value of the attribute.\n   * @param namespace The namespace in which the attribute is defined.\n   * @returns Nothing.\n   */\n  abstract attributeChangedCallback(\n      attrName: string, oldValue: string|null, newValue: string, namespace?: string): void;\n  /**\n   * Prototype for a handler that responds to the insertion of the custom element in the DOM.\n   * @returns Nothing.\n   */\n  abstract connectedCallback(): void;\n  /**\n   * Prototype for a handler that responds to the deletion of the custom element from the DOM.\n   * @returns Nothing.\n   */\n  abstract disconnectedCallback(): void;\n}\n\n/**\n * Additional type information that can be added to the NgElement class,\n * for properties that are added based\n * on the inputs and methods of the underlying component.\n *\n * @publicApi\n */\nexport type WithProperties<P> = {\n  [property in keyof P]: P[property]\n};\n\n/**\n * A configuration that initializes an NgElementConstructor with the\n * dependencies and strategy it needs to transform a component into\n * a custom element class.\n *\n * @publicApi\n */\nexport interface NgElementConfig {\n  /**\n   * The injector to use for retrieving the component's factory.\n   */\n  injector: Injector;\n  /**\n   * An optional custom strategy factory to use instead of the default.\n   * The strategy controls how the transformation is performed.\n   */\n  strategyFactory?: NgElementStrategyFactory;\n}\n\n/**\n *  @description Creates a custom element class based on an Angular component.\n *\n * Builds a class that encapsulates the functionality of the provided component and\n * uses the configuration information to provide more context to the class.\n * Takes the component factory's inputs and outputs to convert them to the proper\n * custom element API and add hooks to input changes.\n *\n * The configuration's injector is the initial injector set on the class,\n * and used by default for each created instance.This behavior can be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations.\n *\n * @param component The component to transform.\n * @param config A configuration that provides initialization information to the created class.\n * @returns The custom-element construction class, which can be registered with\n * a browser's `CustomElementRegistry`.\n *\n * @publicApi\n */\nexport function createCustomElement<P>(\n    component: Type<any>, config: NgElementConfig): NgElementConstructor<P> {\n  const inputs = getComponentInputs(component, config.injector);\n\n  const strategyFactory =\n      config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n\n  const attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n\n  class NgElementImpl extends NgElement {\n    // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static\n    // field externs. So using quoted access to explicitly prevent renaming.\n    static readonly['observedAttributes'] = Object.keys(attributeToPropertyInputs);\n\n    protected get ngElementStrategy(): NgElementStrategy {\n      // NOTE:\n      // Some polyfills (e.g. `document-register-element`) do not call the constructor, therefore\n      // it is not safe to set `ngElementStrategy` in the constructor and assume it will be\n      // available inside the methods.\n      //\n      // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For\n      // now this is tested using a Google internal test suite.\n      if (!this._ngElementStrategy) {\n        const strategy = this._ngElementStrategy =\n            strategyFactory.create(this.injector || config.injector);\n\n        // Collect pre-existing values on the element to re-apply through the strategy.\n        const preExistingValues =\n            inputs.filter(({propName}) => this.hasOwnProperty(propName)).map(({propName}): [\n              string, any\n            ] => [propName, (this as any)[propName]]);\n\n        // In some browsers (e.g. IE10), `Object.setPrototypeOf()` (which is required by some Custom\n        // Elements polyfills) is not defined and is thus polyfilled in a way that does not preserve\n        // the prototype chain. In such cases, `this` will not be an instance of `NgElementImpl` and\n        // thus not have the component input getters/setters defined on `NgElementImpl.prototype`.\n        if (!(this instanceof NgElementImpl)) {\n          // Add getters and setters to the instance itself for each property input.\n          defineInputGettersSetters(inputs, this);\n        } else {\n          // Delete the property from the instance, so that it can go through the getters/setters\n          // set on `NgElementImpl.prototype`.\n          preExistingValues.forEach(([propName]) => delete (this as any)[propName]);\n        }\n\n        // Re-apply pre-existing values through the strategy.\n        preExistingValues.forEach(([propName, value]) => strategy.setInputValue(propName, value));\n      }\n\n      return this._ngElementStrategy!;\n    }\n\n    private _ngElementStrategy?: NgElementStrategy;\n\n    constructor(private readonly injector?: Injector) {\n      super();\n    }\n\n    attributeChangedCallback(\n        attrName: string, oldValue: string|null, newValue: string, namespace?: string): void {\n      const propName = attributeToPropertyInputs[attrName]!;\n      this.ngElementStrategy.setInputValue(propName, newValue);\n    }\n\n    connectedCallback(): void {\n      this.ngElementStrategy.connect(this);\n\n      // Listen for events from the strategy and dispatch them as custom events\n      this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(e => {\n        const customEvent = createCustomEvent(this.ownerDocument!, e.name, e.value);\n        this.dispatchEvent(customEvent);\n      });\n    }\n\n    disconnectedCallback(): void {\n      // Not using `this.ngElementStrategy` to avoid unnecessarily creating the `NgElementStrategy`.\n      if (this._ngElementStrategy) {\n        this._ngElementStrategy.disconnect();\n      }\n\n      if (this.ngElementEventsSubscription) {\n        this.ngElementEventsSubscription.unsubscribe();\n        this.ngElementEventsSubscription = null;\n      }\n    }\n  }\n\n  // Add getters and setters to the prototype for each property input.\n  defineInputGettersSetters(inputs, NgElementImpl.prototype);\n\n  return (NgElementImpl as any) as NgElementConstructor<P>;\n}\n\n// Helpers\nfunction defineInputGettersSetters(\n    inputs: {propName: string, templateName: string}[], target: object): void {\n  // Add getters and setters for each property input.\n  inputs.forEach(({propName}) => {\n    Object.defineProperty(target, propName, {\n      get(): any {\n        return this.ngElementStrategy.getInputValue(propName);\n      },\n      set(newValue: any): void {\n        this.ngElementStrategy.setInputValue(propName, newValue);\n      },\n      configurable: true,\n      enumerable: true,\n    });\n  });\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n/**\n * @publicApi\n */\nexport const VERSION = new Version('9.1.11');\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}